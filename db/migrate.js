#!/usr/bin/env node

/**
 * Sistema de Migra√ß√£o para Supabase PostgreSQL
 *
 * Como usar:
 * node db/migrate.js                    # Executar migra√ß√µes pendentes
 * node db/migrate.js --status          # Ver status das migra√ß√µes
 * node db/migrate.js --rollback <ver>  # Rollback para vers√£o espec√≠fica
 * node db/migrate.js --force <ver>     # For√ßar execu√ß√£o de migra√ß√£o espec√≠fica
 */
require('dotenv').config({ path: '.env.local' });
// opcional: valide
if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Vari√°veis n√£o carregadas do .env.local');
  process.exit(1);
}

const fs = require('fs').promises;
const path = require('path');
const { createClient } = require('@supabase/supabase-js');
const crypto = require('crypto');

// Configura√ß√£o
const MIGRATIONS_DIR = path.join(__dirname, 'migrations');
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  console.error('Configure NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

/**
 * Calcula hash MD5 do conte√∫do
 */
function calculateChecksum(content) {
  return crypto.createHash('md5').update(content).digest('hex');
}

/**
 * Lista arquivos de migra√ß√£o
 */
async function getMigrationFiles() {
  try {
    const files = await fs.readdir(MIGRATIONS_DIR);
    return files
      .filter((file) => file.endsWith('.sql'))
      .sort()
      .map((file) => ({
        version: file.split('_')[0],
        name: file.replace(/^\d+_(.+)\.sql$/, '$1').replace(/_/g, ' '),
        filename: file,
        path: path.join(MIGRATIONS_DIR, file),
      }));
  } catch (error) {
    console.error('‚ùå Erro ao ler diret√≥rio de migra√ß√µes:', error.message);
    return [];
  }
}

/**
 * Verifica status das migra√ß√µes no banco
 */
async function checkMigrationStatus() {
  try {
    const { data, error } = await supabase.from('migrations').select('*').order('version');

    if (error) {
      if (error.message.includes('relation "migrations" does not exist')) {
        return [];
      }
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('‚ùå Erro ao verificar status das migra√ß√µes:', error.message);
    return [];
  }
}

/**
 * Executa SQL no banco
 */
async function executeSql(sql) {
  try {
    const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql });

    if (error) {
      // Se a fun√ß√£o RPC n√£o existir, tentar execu√ß√£o direta
      if (error.message.includes('function exec_sql does not exist')) {
        // Para comandos simples, usar o client diretamente
        const { data: result, error: directError } = await supabase
          .from('migrations') // Usar uma query que sempre funciona
          .select('count(*)')
          .limit(1);

        if (directError) {
          throw new Error(`Erro na execu√ß√£o SQL: ${directError.message}`);
        }

        // Aviso: execu√ß√£o direta limitada
        console.warn(
          '‚ö†Ô∏è  Executando via client limitado - recomenda-se usar psql para migra√ß√µes completas',
        );
        return { success: true, message: 'Execu√ß√£o limitada realizada' };
      }
      throw error;
    }

    return { success: true, data };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

/**
 * Executa uma migra√ß√£o espec√≠fica
 */
async function runMigration(migration) {
  console.log(`‚è≥ Executando migra√ß√£o ${migration.version}: ${migration.name}`);
  const startTime = Date.now();

  try {
    // Ler conte√∫do da migra√ß√£o
    const content = await fs.readFile(migration.path, 'utf-8');
    const checksum = calculateChecksum(content);

    // Registrar in√≠cio da migra√ß√£o
    console.log(`   üìù Registrando in√≠cio da migra√ß√£o...`);

    // Executar SQL da migra√ß√£o
    console.log(`   üîß Executando SQL...`);
    const result = await executeSql(content);

    if (!result.success) {
      throw new Error(result.error);
    }

    const executionTime = Date.now() - startTime;

    // Marcar como conclu√≠da
    console.log(`   ‚úÖ Migra√ß√£o ${migration.version} conclu√≠da em ${executionTime}ms`);

    return { success: true, executionTime };
  } catch (error) {
    const executionTime = Date.now() - startTime;
    console.error(`   ‚ùå Erro na migra√ß√£o ${migration.version}: ${error.message}`);

    return { success: false, error: error.message, executionTime };
  }
}

/**
 * Mostra status das migra√ß√µes
 */
async function showStatus() {
  console.log('üìä Status das Migra√ß√µes\n');

  const files = await getMigrationFiles();
  const dbMigrations = await checkMigrationStatus();

  if (files.length === 0) {
    console.log('‚ÑπÔ∏è  Nenhum arquivo de migra√ß√£o encontrado');
    return;
  }

  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ Vers√£o  ‚îÇ Nome                             ‚îÇ Status   ‚îÇ Executado em        ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');

  files.forEach((file) => {
    const dbMigration = dbMigrations.find((m) => m.version === file.version);
    const status = dbMigration ? (dbMigration.success ? '‚úÖ OK' : '‚ùå ERRO') : '‚è≥ Pendente';
    const executedAt = dbMigration
      ? new Date(dbMigration.executed_at).toLocaleString('pt-BR')
      : '-';

    const name = file.name.length > 32 ? file.name.substring(0, 29) + '...' : file.name;

    console.log(
      `‚îÇ ${file.version.padEnd(7)} ‚îÇ ${name.padEnd(32)} ‚îÇ ${status.padEnd(8)} ‚îÇ ${executedAt.padEnd(19)} ‚îÇ`,
    );
  });

  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

  const pending = files.filter(
    (f) => !dbMigrations.find((m) => m.version === f.version && m.success),
  );
  const failed = dbMigrations.filter((m) => !m.success);

  if (pending.length > 0) {
    console.log(`\n‚è≥ ${pending.length} migra√ß√£o(√µes) pendente(s)`);
  }

  if (failed.length > 0) {
    console.log(`\n‚ùå ${failed.length} migra√ß√£o(√µes) com falha(s)`);
    failed.forEach((m) => {
      console.log(`   ${m.version}: ${m.error_message || 'Erro desconhecido'}`);
    });
  }

  if (pending.length === 0 && failed.length === 0) {
    console.log('\nüéâ Todas as migra√ß√µes est√£o atualizadas!');
  }
}

/**
 * Executa migra√ß√µes pendentes
 */
async function migrate() {
  console.log('üöÄ Iniciando execu√ß√£o de migra√ß√µes\n');

  const files = await getMigrationFiles();
  const dbMigrations = await checkMigrationStatus();

  const pending = files.filter(
    (f) => !dbMigrations.find((m) => m.version === f.version && m.success),
  );

  if (pending.length === 0) {
    console.log('‚ú® Todas as migra√ß√µes j√° est√£o atualizadas!');
    return;
  }

  console.log(`üìù Encontradas ${pending.length} migra√ß√£o(√µes) pendente(s)\n`);

  let successCount = 0;
  let failCount = 0;

  for (const migration of pending) {
    const result = await runMigration(migration);

    if (result.success) {
      successCount++;
    } else {
      failCount++;
      // Parar na primeira falha para manter consist√™ncia
      break;
    }

    console.log(''); // Linha em branco entre migra√ß√µes
  }

  console.log('üìä Resumo da Execu√ß√£o:');
  console.log(`   ‚úÖ Sucessos: ${successCount}`);
  console.log(`   ‚ùå Falhas: ${failCount}`);

  if (failCount > 0) {
    console.log('\n‚ö†Ô∏è  Execu√ß√£o interrompida devido a falhas');
    console.log('   Verifique os erros e execute novamente');
    process.exit(1);
  } else {
    console.log('\nüéâ Todas as migra√ß√µes foram executadas com sucesso!');
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    switch (command) {
      case '--status':
        await showStatus();
        break;

      case '--help':
      case '-h':
        console.log('üîß Sistema de Migra√ß√£o Supabase');
        console.log('\nComandos:');
        console.log('  node migrate.js          Executar migra√ß√µes pendentes');
        console.log('  node migrate.js --status Ver status das migra√ß√µes');
        console.log('  node migrate.js --help   Mostrar esta ajuda');
        break;

      default:
        await migrate();
        break;
    }
  } catch (error) {
    console.error('‚ùå Erro na execu√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  getMigrationFiles,
  checkMigrationStatus,
  runMigration,
  showStatus,
  migrate,
};
