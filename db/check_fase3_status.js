require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

/**
 * Verifica o status atual das migra√ß√µes e executa a Fase 3
 */
async function executeFase3() {
  try {
    console.log('üîç AN√ÅLISE DA FASE 3 - EXECU√á√ÉO NO BANCO DE DADOS\n');

    // 1. Verificar status atual das tabelas
    console.log('üìä Verificando tabelas atuais...');
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .order('table_name');

    if (tablesError) {
      console.log('‚ùå Erro ao consultar tabelas:', tablesError.message);
      return;
    }

    // Listar tabelas encontradas
    const tableNames = tables.map((t) => t.table_name);
    console.log('üìã Tabelas encontradas:', tableNames.length);

    // Verificar se ainda existem nomes em portugu√™s
    const ptTables = tableNames.filter((name) =>
      [
        'unidades',
        'clientes',
        'profissionais',
        'servicos',
        'fila',
        'planos',
        'assinaturas',
        'notificacoes',
        'financeiro_mov',
      ].includes(name),
    );

    // Verificar se j√° existem nomes em ingl√™s
    const enTables = tableNames.filter((name) =>
      [
        'units',
        'customers',
        'professionals',
        'services',
        'queue',
        'subscription_plans',
        'subscriptions',
        'notifications',
        'financial_transactions',
      ].includes(name),
    );

    console.log(
      'üáßüá∑ Tabelas em portugu√™s ainda presentes:',
      ptTables.length > 0 ? ptTables : 'Nenhuma',
    );
    console.log('üá∫üá∏ Tabelas em ingl√™s j√° existentes:', enTables.length > 0 ? enTables : 'Nenhuma');

    // 2. Determinar a√ß√£o necess√°ria
    if (ptTables.length > 0) {
      console.log('\nüöÄ A√á√ÉO NECESS√ÅRIA: Executar migra√ß√£o PT ‚Üí EN');
      console.log('üìÅ Script dispon√≠vel: migration_pt_to_en.sql');
      console.log('üìã Checklist Fase 3 em docs/Tarefas/AjustedoSQL.md est√° marcado como CONCLU√çDO');
      console.log('‚ùì Mas as tabelas ainda est√£o em portugu√™s no banco');

      console.log('\n‚ö†Ô∏è  DECIS√ÉO NECESS√ÅRIA:');
      console.log('1. Executar migration_pt_to_en.sql no Supabase Dashboard SQL Editor');
      console.log('2. Ou usar o script de execu√ß√£o autom√°tica');

      return false; // Migra√ß√£o ainda necess√°ria
    } else if (enTables.length > 0) {
      console.log('\n‚úÖ MIGRA√á√ÉO J√Å EXECUTADA!');
      console.log('üéâ Todas as tabelas j√° est√£o em ingl√™s');

      // Verificar tipos ENUM
      const { data: enums, error: enumsError } = await supabase.rpc('exec_sql', {
        sql_query:
          "SELECT typname FROM pg_type WHERE typname IN ('user_role', 'appointment_status', 'queue_status', 'transaction_type')",
      });

      if (!enumsError && enums) {
        console.log(
          'üè∑Ô∏è  Tipos ENUM em ingl√™s:',
          enums.length > 0 ? 'Encontrados' : 'N√£o encontrados',
        );
      }

      return true; // Migra√ß√£o completa
    } else {
      console.log('\nü§î SITUA√á√ÉO N√ÉO IDENTIFICADA');
      console.log('Nem tabelas PT nem EN foram encontradas');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error.message);
    return false;
  }
}

/**
 * Executa a migra√ß√£o PT ‚Üí EN automaticamente
 */
async function executeMigration() {
  try {
    console.log('üöÄ Iniciando execu√ß√£o da migra√ß√£o PT ‚Üí EN...\n');

    // Ler o arquivo de migra√ß√£o
    const fs = require('fs');
    const path = require('path');
    const migrationPath = path.join(__dirname, '..', 'migration_pt_to_en.sql');

    if (!fs.existsSync(migrationPath)) {
      console.log('‚ùå Arquivo migration_pt_to_en.sql n√£o encontrado');
      return false;
    }

    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    console.log('üìù Arquivo de migra√ß√£o carregado');
    console.log('üìè Tamanho:', migrationSQL.length, 'caracteres');

    // Dividir em comandos menores para execu√ß√£o
    const commands = migrationSQL
      .split(';')
      .map((cmd) => cmd.trim())
      .filter((cmd) => cmd.length > 0 && !cmd.startsWith('--') && !cmd.match(/^\s*$/))
      .filter((cmd) => !cmd.includes('BEGIN') && !cmd.includes('COMMIT'));

    console.log('üîß Comandos extra√≠dos:', commands.length);

    console.log('\n‚ö†Ô∏è  IMPORTANTE: Para executar via API do Supabase:');
    console.log('1. As migra√ß√µes DDL (ALTER TABLE, CREATE TYPE, etc.) t√™m limita√ß√µes via API');
    console.log('2. Recomendado: Execu√ß√£o manual no SQL Editor do Dashboard Supabase');
    console.log('3. Ou uso de conex√£o direta com psql');

    return false; // Execu√ß√£o manual recomendada
  } catch (error) {
    console.error('‚ùå Erro na execu√ß√£o:', error.message);
    return false;
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('üîÑ FASE 3: EXECU√á√ÉO NO BANCO DE DADOS');
  console.log('=====================================\n');

  const migrationCompleted = await executeFase3();

  if (!migrationCompleted) {
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Abrir Supabase Dashboard > SQL Editor');
    console.log('2. Executar o conte√∫do de migration_pt_to_en.sql');
    console.log('3. Verificar sucesso da execu√ß√£o');
    console.log('4. Prosseguir para Fase 4 (Atualiza√ß√£o do C√≥digo)');
  } else {
    console.log('\nüéØ FASE 3 COMPLETA! Prosseguir para Fase 4');
    console.log('üìã Pr√≥xima tarefa: Atualiza√ß√£o do c√≥digo da aplica√ß√£o');
  }
}

if (require.main === module) {
  main().catch(console.error);
}
