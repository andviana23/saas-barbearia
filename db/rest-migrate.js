#!/usr/bin/env node

/**
 * Migra√ß√£o via API REST do Supabase
 * Executa comandos SQL usando a API REST /rest/v1/rpc
 */

require('dotenv').config({ path: '.env.local' });
const fs = require('fs').promises;
const path = require('path');

// Configura√ß√£o
const MIGRATIONS_DIR = path.join(__dirname, 'migrations');
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

/**
 * Executa SQL via API REST do Supabase
 */
async function executeSQL(sql) {
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${SUPABASE_SERVICE_KEY}`,
        apikey: SUPABASE_SERVICE_KEY,
      },
      body: JSON.stringify({ sql }),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`HTTP ${response.status}: ${error}`);
    }

    return await response.json();
  } catch (error) {
    throw new Error(`Erro na execu√ß√£o SQL: ${error.message}`);
  }
}

/**
 * Lista arquivos de migra√ß√£o
 */
async function getMigrationFiles() {
  try {
    const files = await fs.readdir(MIGRATIONS_DIR);
    return files
      .filter((file) => file.endsWith('.sql'))
      .sort()
      .map((file) => ({
        version: file.split('_')[0],
        name: file.replace(/^\d+_(.+)\.sql$/, '$1').replace(/_/g, ' '),
        filename: file,
        path: path.join(MIGRATIONS_DIR, file),
      }));
  } catch (error) {
    console.error('‚ùå Erro ao ler diret√≥rio de migra√ß√µes:', error.message);
    return [];
  }
}

/**
 * Executa uma migra√ß√£o
 */
async function executeMigration(migration) {
  console.log(`‚è≥ Executando migra√ß√£o ${migration.version}: ${migration.name}`);

  try {
    // Ler conte√∫do da migra√ß√£o
    const content = await fs.readFile(migration.path, 'utf-8');

    console.log(`   üîß Executando SQL da migra√ß√£o...`);

    // Tentar executar o SQL completo
    await executeSQL(content);

    console.log(`   ‚úÖ Migra√ß√£o ${migration.version} executada com sucesso`);
    return { success: true };
  } catch (error) {
    console.error(`   ‚ùå Erro na migra√ß√£o ${migration.version}: ${error.message}`);
    return { success: false, error: error.message };
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('üöÄ Iniciando migra√ß√µes via API REST do Supabase\n');

  const migrations = await getMigrationFiles();

  if (migrations.length === 0) {
    console.log('‚ÑπÔ∏è  Nenhum arquivo de migra√ß√£o encontrado');
    return;
  }

  console.log(`üìù Encontradas ${migrations.length} migra√ß√£o(√µes)\n`);

  let successCount = 0;
  let failCount = 0;

  for (const migration of migrations) {
    const result = await executeMigration(migration);

    if (result.success) {
      successCount++;
    } else {
      failCount++;
      console.log('‚ö†Ô∏è  Parando execu√ß√£o devido a falha\n');
      break;
    }

    console.log('');
  }

  console.log('üìä Resumo da Execu√ß√£o:');
  console.log(`   ‚úÖ Sucessos: ${successCount}`);
  console.log(`   ‚ùå Falhas: ${failCount}`);

  if (failCount > 0) {
    console.log('\n‚ö†Ô∏è  Execu√ß√£o interrompida devido a falhas');
    console.log('   üí° Consulte o manual-migration-guide.md para instru√ß√µes');
  } else {
    console.log('\nüéâ Todas as migra√ß√µes foram executadas com sucesso!');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Erro na execu√ß√£o:', error.message);
    process.exit(1);
  });
}
