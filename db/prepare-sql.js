#!/usr/bin/env node

/**
 * Prepara arquivos SQL para execu√ß√£o manual no Supabase
 * Combina todas as migra√ß√µes em um √∫nico arquivo SQL
 */

require('dotenv').config({ path: '.env.local' })
const fs = require('fs').promises
const path = require('path')

// Configura√ß√£o
const MIGRATIONS_DIR = path.join(__dirname, 'migrations')
const OUTPUT_FILE = path.join(__dirname, 'all-migrations.sql')

/**
 * Lista arquivos de migra√ß√£o
 */
async function getMigrationFiles() {
  try {
    const files = await fs.readdir(MIGRATIONS_DIR)
    return files
      .filter((file) => file.endsWith('.sql'))
      .sort()
      .map((file) => ({
        version: file.split('_')[0],
        name: file.replace(/^\d+_(.+)\.sql$/, '$1').replace(/_/g, ' '),
        filename: file,
        path: path.join(MIGRATIONS_DIR, file),
      }))
  } catch (error) {
    console.error('‚ùå Erro ao ler diret√≥rio de migra√ß√µes:', error.message)
    return []
  }
}

/**
 * Verifica se j√° existe arquivo otimizado
 */
async function checkExistingOptimizedSQL() {
  try {
    const content = await fs.readFile(OUTPUT_FILE, 'utf-8')
    const isOptimized =
      content.includes('IF NOT EXISTS') && content.includes('DO $')
    const stats = await fs.stat(OUTPUT_FILE)

    return {
      exists: true,
      isOptimized,
      size: stats.size,
      lastModified: stats.mtime,
    }
  } catch (error) {
    return { exists: false }
  }
}

/**
 * Combina todas as migra√ß√µes em um arquivo otimizado
 */
async function combineAllMigrations() {
  console.log('üîß Preparando arquivo SQL consolidado...\n')

  // Verificar se j√° existe vers√£o otimizada
  const existing = await checkExistingOptimizedSQL()

  if (existing.exists && existing.isOptimized) {
    console.log(
      `   ‚úÖ Arquivo consolidado otimizado j√° existe (${Math.round(existing.size / 1024)}KB)`
    )
    console.log(
      `   üìÖ √öltima modifica√ß√£o: ${existing.lastModified.toLocaleString('pt-BR')}`
    )
    console.log(`   üí° Usando arquivo otimizado existente`)
    console.log(
      '\nüìã Para for√ßar nova gera√ß√£o, delete o arquivo all-migrations.sql'
    )
    return
  }

  const migrations = await getMigrationFiles()

  if (migrations.length === 0) {
    console.log('‚ÑπÔ∏è  Nenhum arquivo de migra√ß√£o encontrado')
    return
  }

  let combinedSQL = `-- =========================================================================
-- ARQUIVO CONSOLIDADO DE MIGRA√á√ïES OTIMIZADO - SISTEMA BARBERSHOP SaaS
-- Data de gera√ß√£o: ${new Date().toISOString()}
-- Total de migra√ß√µes: ${migrations.length}
-- VERS√ÉO IDEMPOTENTE: Pode ser executado m√∫ltiplas vezes sem erro
-- 
-- INSTRU√á√ïES:
-- 1. Acesse o SQL Editor do Supabase
-- 2. Cole este conte√∫do completo
-- 3. Execute com Ctrl+Enter ou clique em "Run"
-- 4. Verifique se n√£o h√° erros na sa√≠da
-- 5. Execute: npm run db:verify
-- =========================================================================

`

  for (const migration of migrations) {
    console.log(
      `   üìÑ Processando migra√ß√£o ${migration.version}: ${migration.name}`
    )

    try {
      const content = await fs.readFile(migration.path, 'utf-8')

      // Aplicar otimiza√ß√µes para tornar idempotente
      let optimizedContent = content
        // Adicionar IF NOT EXISTS para extens√µes (apenas se n√£o existir)
        .replace(
          /CREATE EXTENSION (?!IF NOT EXISTS)([^;]+);/g,
          'CREATE EXTENSION IF NOT EXISTS $1;'
        )
        // Adicionar IF NOT EXISTS para esquemas (apenas se n√£o existir)
        .replace(
          /CREATE SCHEMA (?!IF NOT EXISTS)([^;]+);/g,
          'CREATE SCHEMA IF NOT EXISTS $1;'
        )
        // Tipos ENUM j√° est√£o corretos nos arquivos de migra√ß√£o originais
        // Adicionar IF NOT EXISTS para tabelas (apenas se n√£o existir)
        .replace(
          /CREATE TABLE (?!IF NOT EXISTS)([^\s\(]+)(\s*\()/g,
          'CREATE TABLE IF NOT EXISTS $1$2'
        )
        // Garantir CREATE OR REPLACE para fun√ß√µes
        .replace(/CREATE FUNCTION/g, 'CREATE OR REPLACE FUNCTION')

      combinedSQL += `
-- =========================================================================
-- MIGRA√á√ÉO ${migration.version.toUpperCase()}: ${migration.name.toUpperCase()}
-- =========================================================================

${optimizedContent}

-- =========================================================================
-- FIM DA MIGRA√á√ÉO ${migration.version.toUpperCase()}
-- =========================================================================

`
    } catch (error) {
      console.error(`   ‚ùå Erro ao ler ${migration.filename}: ${error.message}`)
    }
  }

  // Adicionar verifica√ß√£o final
  combinedSQL += `
-- =========================================================================
-- VERIFICA√á√ÉO FINAL - EXECUTE PARA CONFIRMAR QUE TUDO FOI CRIADO
-- =========================================================================

-- Verificar tabelas criadas
SELECT 'Tabelas criadas:' as info;
SELECT schemaname, tablename 
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN (
  'migrations', 'unidades', 'profiles', 'profissionais', 
  'clientes', 'servicos', 'appointments', 'appointments_servicos', 
  'fila', 'financeiro_mov'
)
ORDER BY tablename;

-- Verificar tipos enumerados
SELECT 'Tipos enumerados criados:' as info;
SELECT typname FROM pg_type WHERE typname IN (
  'user_role', 'appointment_status', 'queue_status', 
  'queue_priority', 'movimento_tipo'
);

-- Verificar fun√ß√µes de seguran√ßa
SELECT 'Fun√ß√µes de seguran√ßa criadas:' as info;
SELECT proname FROM pg_proc WHERE proname IN (
  'current_user_id', 'current_unidade_id', 'has_unit_access', 'is_admin'
);

-- Verificar RLS ativo
SELECT 'RLS Status:' as info;
SELECT tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('unidades', 'profiles', 'clientes', 'appointments')
ORDER BY tablename;

-- =========================================================================
-- PARAB√âNS! SE CHEGOU AT√â AQUI SEM ERROS, SUAS MIGRA√á√ïES FORAM APLICADAS!
-- =========================================================================
`

  // Salvar arquivo combinado
  await fs.writeFile(OUTPUT_FILE, combinedSQL, 'utf-8')

  console.log(`\n‚úÖ Arquivo SQL consolidado criado: ${OUTPUT_FILE}`)
  console.log('\nüìã Pr√≥ximos passos:')
  console.log('1. Acesse o SQL Editor do seu projeto Supabase')
  console.log('2. Cole o conte√∫do do arquivo all-migrations.sql')
  console.log('3. Execute com Ctrl+Enter ou "Run"')
  console.log('4. Verifique se a execu√ß√£o ocorreu sem erros')
  console.log('\nüéØ Ap√≥s execu√ß√£o, execute: npm run db:verify')
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  await combineAllMigrations()
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Erro na execu√ß√£o:', error.message)
    process.exit(1)
  })
}
