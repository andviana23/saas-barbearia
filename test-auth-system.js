#!/usr/bin/env node

/**
 * Script de Teste Completo do Sistema de Autentica√ß√£o
 * 
 * Testa:
 * - Login/Logout com usu√°rios existentes
 * - Persist√™ncia de sess√£o
 * - Redirecionamentos
 * - Recupera√ß√£o de senha
 * - Middleware de prote√ß√£o
 * - Rotas p√∫blicas vs protegidas
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

console.log('üîê === TESTE COMPLETO DO SISTEMA DE AUTENTICA√á√ÉO ===\n');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

let testResults = {
  supabaseConnection: false,
  userListing: false,
  login: false,
  logout: false,
  sessionPersistence: false,
  passwordReset: false,
  middlewareProtection: false,
  routeAccess: false,
  authFlow: false
};

async function testSupabaseConnection() {
  console.log('üì° Testando conex√£o com Supabase...');
  
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    
    if (error) {
      console.log('‚ö†Ô∏è  Erro na consulta profiles:', error.message);
      
      // Tentar uma consulta mais b√°sica
      const { data: authData, error: authError } = await supabase.auth.getSession();
      if (authError) {
        console.log('‚ùå Falha total na conex√£o:', authError.message);
        return false;
      }
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida');
    return true;
  } catch (error) {
    console.log('‚ùå Falha na conex√£o:', error.message);
    return false;
  }
}

async function listExistingUsers() {
  console.log('\nüë• Verificando usu√°rios existentes...');
  
  try {
    // Tentar listar profiles para ver se h√° usu√°rios
    const { data, error } = await supabase
      .from('profiles')
      .select('id, email, name')
      .limit(5);
    
    if (error) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel listar usu√°rios:', error.message);
      console.log('   - Isso pode ser normal devido √†s pol√≠ticas RLS');
      return true; // N√£o √© um erro cr√≠tico
    }
    
    if (data && data.length > 0) {
      console.log(`‚úÖ Encontrados ${data.length} usu√°rios no sistema`);
      data.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email || 'Email n√£o dispon√≠vel'} (${user.name || 'Nome n√£o dispon√≠vel'})`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado ou acesso restrito');
    }
    
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  Erro ao listar usu√°rios:', error.message);
    return true; // N√£o √© cr√≠tico
  }
}

async function testLoginWithExistingUser() {
  console.log('\nüîë Testando login com usu√°rio existente...');
  
  // Lista de usu√°rios comuns para teste
  const testUsers = [
    { email: 'admin@barbearia.com', password: 'admin123' },
    { email: 'gerente@barbearia.com', password: 'gerente123' },
    { email: 'teste@barbearia.com', password: 'teste123' },
    { email: 'user@example.com', password: 'password123' }
  ];
  
  for (const user of testUsers) {
    try {
      console.log(`   Tentando login com: ${user.email}`);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email: user.email,
        password: user.password
      });
      
      if (error) {
        console.log(`   ‚ùå Falha: ${error.message}`);
        continue;
      }
      
      if (data.user && data.session) {
        console.log('‚úÖ Login realizado com sucesso!');
        console.log(`   - User ID: ${data.user.id}`);
        console.log(`   - Email: ${data.user.email}`);
        console.log(`   - Session v√°lida: ${!!data.session.access_token}`);
        console.log(`   - Email confirmado: ${data.user.email_confirmed_at ? 'Sim' : 'N√£o'}`);
        return { success: true, user: data.user, session: data.session };
      }
    } catch (error) {
      console.log(`   ‚ùå Erro: ${error.message}`);
    }
  }
  
  console.log('‚ùå N√£o foi poss√≠vel fazer login com nenhum usu√°rio de teste');
  console.log('   - Verifique se h√° usu√°rios cadastrados no sistema');
  console.log('   - Confirme as credenciais ou crie um usu√°rio manualmente');
  return { success: false };
}

async function testAnonymousAccess() {
  console.log('\nüîì Testando acesso an√¥nimo...');
  
  try {
    // Garantir que n√£o h√° sess√£o ativa
    await supabase.auth.signOut();
    
    // Verificar se conseguimos acessar dados p√∫blicos
    const { data, error } = await supabase.auth.getSession();
    
    if (data.session) {
      console.log('‚ö†Ô∏è  Ainda h√° uma sess√£o ativa ap√≥s signOut');
      return false;
    }
    
    console.log('‚úÖ Acesso an√¥nimo funcionando (sem sess√£o ativa)');
    return true;
  } catch (error) {
    console.log('‚ùå Erro no teste de acesso an√¥nimo:', error.message);
    return false;
  }
}

async function testSessionPersistence(loginResult) {
  console.log('\n‚è±Ô∏è  Testando persist√™ncia de sess√£o...');
  
  if (!loginResult.success) {
    console.log('‚ö†Ô∏è  Pulando teste - nenhum login bem-sucedido');
    return false;
  }
  
  try {
    // Verificar sess√£o atual
    const { data: session1 } = await supabase.auth.getSession();
    if (!session1.session) {
      console.log('‚ùå Sess√£o n√£o encontrada');
      return false;
    }
    
    // Simular refresh/reload verificando se a sess√£o persiste
    const { data: user } = await supabase.auth.getUser();
    if (!user.user) {
      console.log('‚ùå Usu√°rio n√£o persistiu na sess√£o');
      return false;
    }
    
    console.log('‚úÖ Sess√£o persiste corretamente');
    console.log(`   - Session ID: ${session1.session.access_token.substring(0, 20)}...`);
    console.log(`   - Expires: ${new Date(session1.session.expires_at * 1000).toLocaleString()}`);
    console.log(`   - User ID: ${user.user.id}`);
    return true;
  } catch (error) {
    console.log('‚ùå Falha no teste de persist√™ncia:', error.message);
    return false;
  }
}

async function testLogout() {
  console.log('\nüö™ Testando logout...');
  
  try {
    // Verificar se est√° logado
    const { data: beforeLogout } = await supabase.auth.getSession();
    if (!beforeLogout.session) {
      console.log('‚ö†Ô∏è  Usu√°rio n√£o estava logado antes do teste de logout');
    } else {
      console.log('   - Usu√°rio logado, procedendo com logout...');
    }
    
    // Fazer logout
    const { error } = await supabase.auth.signOut();
    if (error) {
      console.log('‚ùå Erro no logout:', error.message);
      return false;
    }
    
    // Verificar se realmente deslogou
    const { data: afterLogout } = await supabase.auth.getSession();
    if (afterLogout.session) {
      console.log('‚ùå Sess√£o ainda ativa ap√≥s logout');
      return false;
    }
    
    console.log('‚úÖ Logout realizado com sucesso');
    return true;
  } catch (error) {
    console.log('‚ùå Falha no logout:', error.message);
    return false;
  }
}

async function testPasswordReset() {
  console.log('\nüîÑ Testando recupera√ß√£o de senha...');
  
  const testEmail = 'teste@barbearia.com'; // Email gen√©rico para teste
  
  try {
    const { data, error } = await supabase.auth.resetPasswordForEmail(testEmail, {
      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/reset-password`
    });
    
    if (error) {
      console.log('‚ùå Erro na recupera√ß√£o de senha:', error.message);
      return false;
    }
    
    console.log('‚úÖ Funcionalidade de recupera√ß√£o de senha est√° funcionando');
    console.log(`   - Email de teste: ${testEmail}`);
    console.log('   - Processo de reset iniciado com sucesso');
    return true;
  } catch (error) {
    console.log('‚ùå Falha na recupera√ß√£o de senha:', error.message);
    return false;
  }
}

function testMiddlewareConfiguration() {
  console.log('\nüõ°Ô∏è  Verificando configura√ß√£o do middleware...');
  
  try {
    const middlewarePath = path.join(process.cwd(), 'src', 'middleware.ts');
    
    if (!fs.existsSync(middlewarePath)) {
      console.log('‚ùå Arquivo middleware.ts n√£o encontrado');
      return false;
    }
    
    const middlewareContent = fs.readFileSync(middlewarePath, 'utf8');
    
    // Verificar configura√ß√µes essenciais
    const checks = [
      { name: 'Importa√ß√£o do Supabase SSR', pattern: /@supabase\/ssr/ },
      { name: 'Bypass para modo E2E', pattern: /E2E_MODE/ },
      { name: 'Rotas p√∫blicas definidas', pattern: /\/login|\/signup|\/forgot-password/ },
      { name: 'Cria√ß√£o do cliente Supabase', pattern: /createServerClient/ },
      { name: 'Verifica√ß√£o de autentica√ß√£o', pattern: /getUser|getSession/ },
      { name: 'Redirecionamento configurado', pattern: /redirect|NextResponse/ }
    ];
    
    let passedChecks = 0;
    checks.forEach(check => {
      if (check.pattern.test(middlewareContent)) {
        console.log(`   ‚úÖ ${check.name}`);
        passedChecks++;
      } else {
        console.log(`   ‚ùå ${check.name}`);
      }
    });
    
    const success = passedChecks >= 5; // Pelo menos 5 de 6
    console.log(`${success ? '‚úÖ' : '‚ùå'} Middleware configurado: ${passedChecks}/${checks.length} verifica√ß√µes`);
    return success;
  } catch (error) {
    console.log('‚ùå Erro ao verificar middleware:', error.message);
    return false;
  }
}

function testRouteConfiguration() {
  console.log('\nüó∫Ô∏è  Verificando configura√ß√£o de rotas...');
  
  try {
    const routesPath = path.join(process.cwd(), 'src', 'routes.ts');
    
    if (!fs.existsSync(routesPath)) {
      console.log('‚ùå Arquivo routes.ts n√£o encontrado');
      return false;
    }
    
    const routesContent = fs.readFileSync(routesPath, 'utf8');
    
    // Verificar configura√ß√µes de rotas
    const checks = [
      { name: 'Defini√ß√£o de roles', pattern: /UserRole.*admin.*gerente.*funcionario/ },
      { name: 'Sistema de rotas estruturado', pattern: /routes.*Record.*RouteMetadata/ },
      { name: 'Controle de acesso por role', pattern: /roles.*\[.*\]/ },
      { name: 'Fun√ß√£o canAccessRoute', pattern: /canAccessRoute/ },
      { name: 'Rotas protegidas definidas', pattern: /dashboard|clientes|agenda/ }
    ];
    
    let passedChecks = 0;
    checks.forEach(check => {
      if (check.pattern.test(routesContent)) {
        console.log(`   ‚úÖ ${check.name}`);
        passedChecks++;
      } else {
        console.log(`   ‚ùå ${check.name}`);
      }
    });
    
    const success = passedChecks >= 4; // Pelo menos 4 de 5 verifica√ß√µes
    console.log(`${success ? '‚úÖ' : '‚ùå'} Rotas configuradas: ${passedChecks}/${checks.length} verifica√ß√µes`);
    return success;
  } catch (error) {
    console.log('‚ùå Erro ao verificar rotas:', error.message);
    return false;
  }
}

function testAuthFlow() {
  console.log('\nüîÑ Verificando fluxo de autentica√ß√£o...');
  
  try {
    // Verificar se existem componentes de autentica√ß√£o
    const authPaths = [
      'src/app/(public)/login',
      'src/app/login',
      'src/components/auth',
      'src/lib/auth'
    ];
    
    let foundAuthComponents = 0;
    authPaths.forEach(authPath => {
      const fullPath = path.join(process.cwd(), authPath);
      if (fs.existsSync(fullPath)) {
        console.log(`   ‚úÖ Encontrado: ${authPath}`);
        foundAuthComponents++;
      }
    });
    
    if (foundAuthComponents === 0) {
      console.log('‚ùå Nenhum componente de autentica√ß√£o encontrado');
      return false;
    }
    
    console.log(`‚úÖ Fluxo de autentica√ß√£o: ${foundAuthComponents} componentes encontrados`);
    return true;
  } catch (error) {
    console.log('‚ùå Erro ao verificar fluxo de autentica√ß√£o:', error.message);
    return false;
  }
}

function generateReport() {
  console.log('\nüìä === RELAT√ìRIO FINAL ===');
  
  const tests = [
    { name: 'Conex√£o Supabase', result: testResults.supabaseConnection },
    { name: 'Listagem de Usu√°rios', result: testResults.userListing },
    { name: 'Login', result: testResults.login },
    { name: 'Logout', result: testResults.logout },
    { name: 'Persist√™ncia de Sess√£o', result: testResults.sessionPersistence },
    { name: 'Recupera√ß√£o de Senha', result: testResults.passwordReset },
    { name: 'Prote√ß√£o Middleware', result: testResults.middlewareProtection },
    { name: 'Configura√ß√£o de Rotas', result: testResults.routeAccess },
    { name: 'Fluxo de Autentica√ß√£o', result: testResults.authFlow }
  ];
  
  const passed = tests.filter(test => test.result).length;
  const total = tests.length;
  
  tests.forEach(test => {
    console.log(`${test.result ? '‚úÖ' : '‚ùå'} ${test.name}`);
  });
  
  console.log(`\nüìà Resultado: ${passed}/${total} testes passaram (${Math.round(passed/total*100)}%)`);
  
  if (passed === total) {
    console.log('üéâ Sistema de autentica√ß√£o funcionando perfeitamente!');
    return true;
  } else if (passed >= total * 0.7) {
    console.log('‚ö†Ô∏è  Sistema de autentica√ß√£o funcionando com alguns problemas');
    return true;
  } else {
    console.log('‚ùå Sistema de autentica√ß√£o com problemas cr√≠ticos');
    return false;
  }
}

async function runAllTests() {
  try {
    testResults.supabaseConnection = await testSupabaseConnection();
    testResults.userListing = await listExistingUsers();
    
    const loginResult = await testLoginWithExistingUser();
    testResults.login = loginResult.success;
    
    await testAnonymousAccess(); // Teste adicional
    
    testResults.sessionPersistence = await testSessionPersistence(loginResult);
    testResults.logout = await testLogout();
    testResults.passwordReset = await testPasswordReset();
    testResults.middlewareProtection = testMiddlewareConfiguration();
    testResults.routeAccess = testRouteConfiguration();
    testResults.authFlow = testAuthFlow();
    
    const success = generateReport();
    
    console.log('\nüí° === RECOMENDA√á√ïES ===');
    if (!testResults.login) {
      console.log('üîß Para resolver problemas de login:');
      console.log('   - Verifique se h√° usu√°rios cadastrados no Supabase');
      console.log('   - Confirme emails de usu√°rios se necess√°rio');
      console.log('   - Execute: npm run db:seed para criar usu√°rios de teste');
    }
    
    if (!testResults.middlewareProtection) {
      console.log('üîß Para melhorar o middleware:');
      console.log('   - Adicione redirecionamento expl√≠cito para /login');
      console.log('   - Verifique configura√ß√£o de rotas protegidas');
    }
    
    console.log('\nüöÄ Pr√≥ximos passos: Testar integra√ß√£o com Supabase');
    
    process.exit(success ? 0 : 1);
  } catch (error) {
    console.error('\nüí• Erro cr√≠tico durante os testes:', error.message);
    process.exit(1);
  }
}

// Executar todos os testes
runAllTests();