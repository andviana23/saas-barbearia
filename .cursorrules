# Regras do Projeto — TRATO (SaaS Barbearia)

## Contexto e Stack Obrigatória

- Stack oficial (usar APENAS estas libs/versões): Next.js 14.2.5, MUI v6.3.1, Supabase 2.x, React Query v5, Zod 3.x, TypeScript 5.x. Não trocar dependências sem aprovação.
- Estratégia: Backend First; RLS/multi-tenancy por `unidade_id`; Server Actions para mutações; React Query para cache e invalidação.
- Raiz do projeto: C:\Users\ADMIN\Desktop\saasBarbearia\

## Como o Agent deve trabalhar (ordem fixa)

1. Antes de QUALQUER código, ler os docs obrigatórios e confirmar entendimento:
   - REGRAS_DE_IMPLEMENTACAO.md, GUIA_TECNOLOGIAS_INTEGRACOES.md, PLANO_TAREFAS.md, RELATORIO_PROCESSOS_FEITOS.md.
2. Perguntar: objetivo, módulo, arquivos-alvo e critérios de aceite. Propor plano curto → aguardar “OK” antes de escrever.
3. Escopo mínimo: editar só os arquivos citados; criar commits atômicos; mostrar diffs e explicar decisões.
4. Dependências: é PROIBIDO adicionar novas libs sem aprovação explícita.
5. Anti-patterns a evitar SEMPRE:
   - RSC: não fazer fetch em Client quando Server Actions resolvem.
   - MUI: sem CSS inline, sem makeStyles v4, respeitar breakpoints.
   - Supabase: nunca burlar RLS; jamais usar service role no client.
   - React Query: keys consistentes; SEMPRE invalidar após mutation.
   - Zod: nada de `any`; prefira `safeParse` e mensagens claras.
6. Após cada entrega:
   - Atualizar **PLANO_TAREFAS.md** e **RELATORIO_PROCESSOS_FEITOS.md** com o que foi feito.
   - Se criar arquivos só de teste, **APAGAR** no final da fase.
7. Se houver bloqueio: documentar o problema, sugerir alternativas e pedir aprovação antes de desviar do padrão.

## Padrões de Implementação (sempre)

- Server Components por padrão; Client só para interatividade.
- Server Actions SEMPRE validadas com Zod; respeitar RLS e `unidade_id`.
- React Query com keys padronizadas e invalidação seletiva.
- UI exclusivamente com componentes MUI v6; a11y básica; nada de CSS inline.
- TypeScript strict; zero `any`/`unknown` sem parse.

## Checklists que o Agent deve cumprir

- **Antes de começar:** documentação analisada; padrões/arquitetura identificados; schemas Zod e types definidos.
- **Durante:** estrutura de pastas oficial; Next 14 + RSC; MUI v6; TS strict; Server Actions com Zod.
- **Depois:** build e type-check limpos; testes manuais; atualizar plano/relatório; recalcular métricas; marcar épico como ✅ no PLANO_TAREFAS.md; excluir arquivos de teste (frontend).

## Formato de respostas do Agent

- Sempre devolver: plano curto → diffs/arquivos → próximos passos → como validar (incluindo quais queries React Query invalidar).
