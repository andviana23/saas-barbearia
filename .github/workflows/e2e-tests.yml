name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.test .env.local
          echo "NODE_ENV=test" >> .env.local
          echo "CI=true" >> .env.local

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          npm run start &
          sleep 30
        env:
          NODE_ENV: production

      - name: Wait for app to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout 120000

      - name: Run E2E tests
        run: npm run e2e
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/
          retention-days: 7

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const resultsPath = 'test-results/test-results.json';
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                
                const passed = results.stats.expected;
                const failed = results.stats.unexpected;
                const total = passed + failed;
                
                const comment = `## 🎭 Playwright Test Results
                
                **Total Tests:** ${total}
                **✅ Passed:** ${passed}
                **❌ Failed:** ${failed}
                
                ${failed > 0 ? '⚠️ Some tests failed. Please check the artifacts for details.' : '🎉 All tests passed!'}
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Error posting test results:', error);
            }
