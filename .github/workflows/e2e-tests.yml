name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # =====================================================
  # E2E SMOKE TESTS (PR) - Execu√ß√£o r√°pida < 5min
  # =====================================================
  smoke-tests:
    name: E2E Smoke Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.test .env.local
          echo "NODE_ENV=test" >> .env.local
          echo "CI=true" >> .env.local
          echo "E2E_MODE=1" >> .env.local

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          npm run start &
          sleep 20
        env:
          NODE_ENV: production

      - name: Wait for app to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E Smoke Tests
        run: npm run e2e:smoke
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-smoke-report
          path: playwright-report/
          retention-days: 7

      - name: Comment PR with smoke results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');

            try {
              const resultsPath = 'test-results/test-results.json';
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                
                const passed = results.stats.expected;
                const failed = results.stats.unexpected;
                const total = passed + failed;
                const duration = Math.round(results.stats.duration / 1000);
                
                const comment = `## üöÄ E2E Smoke Tests Results
                
                **Duration:** ${duration}s
                **Total Tests:** ${total}
                **‚úÖ Passed:** ${passed}
                **‚ùå Failed:** ${failed}
                
                ${failed > 0 ? '‚ö†Ô∏è Smoke tests failed. Please check the artifacts for details.' : 'üéâ All smoke tests passed! Ready for merge.'}
                
                *Full E2E suite will run after merge to main.*
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Error posting smoke results:', error);
            }

  # =====================================================
  # FULL E2E SUITE (MERGE) - Execu√ß√£o completa
  # =====================================================
  full-e2e-tests:
    name: Full E2E Test Suite
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.test .env.local
          echo "NODE_ENV=test" >> .env.local
          echo "CI=true" >> .env.local

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          npm run start &
          sleep 30
        env:
          NODE_ENV: production

      - name: Wait for app to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout 120000

      - name: Run Full E2E Test Suite
        run: npm run e2e
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Generate HTML Report
        run: npx playwright show-report --output-dir=html-report
        if: always()

      - name: Upload Full Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-full-report-${{ github.sha }}
          path: playwright-report/
          retention-days: 30

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-html-report-${{ github.sha }}
          path: html-report/
          retention-days: 30

      - name: Upload Screenshots on Failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-${{ github.sha }}
          path: test-results/
          retention-days: 7

      - name: Archive Test Results for Badge
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-json
          path: test-results/test-results.json
          retention-days: 1

      - name: Create Test Summary
        if: always()
        run: |
          echo "## üé≠ Full E2E Test Results" >> $GITHUB_STEP_SUMMARY

          if [ -f "test-results/test-results.json" ]; then
            PASSED=$(jq '.stats.expected' test-results/test-results.json)
            FAILED=$(jq '.stats.unexpected' test-results/test-results.json)
            TOTAL=$((PASSED + FAILED))
            DURATION=$(jq '.stats.duration' test-results/test-results.json)
            DURATION_SEC=$((DURATION / 1000))
            
            echo "**Duration:** ${DURATION_SEC}s" >> $GITHUB_STEP_SUMMARY
            echo "**Total Tests:** $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "**‚úÖ Passed:** $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "**‚ùå Failed:** $FAILED" >> $GITHUB_STEP_SUMMARY
            
            if [ $FAILED -gt 0 ]; then
              echo "‚ö†Ô∏è Some tests failed. Check artifacts for details." >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "üéâ All tests passed!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Test results not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
