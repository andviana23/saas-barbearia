name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================================================
  # QUALITY ASSURANCE JOBS
  # =====================================================

  lint-and-typecheck:
    name: Lint and TypeCheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Check build
        run: npm run build

  # =====================================================
  # UNIT AND INTEGRATION TESTS
  # =====================================================

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check migration divergence
        run: npm run db:migrate:check
        env:
          DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL || secrets.DATABASE_URL }}

      - name: RLS expected strict check
        run: npm run rls:expected:check

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run RLS smoke test
        run: npx jest tests/rls.smoke.test.ts --runInBand --silent
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # =====================================================
  # SUPABASE RLS REAL (OPCIONAL)
  # =====================================================

  supabase-rls-real:
    name: RLS Execução Real (Supabase Test DB)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [unit-tests]
    services:
      supabase-db:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 54329:5432
        options: >-
          --health-cmd pg_isready -U postgres
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Prepare Supabase test DB
        run: npm run supabase:test:prepare
        env:
          TEST_SUPABASE_DB_URL: postgresql://postgres:postgres@localhost:54329/postgres
      - name: Run RLS real cycle
        run: npm run test:rls:real
        env:
          TEST_SUPABASE_DB_URL: postgresql://postgres:postgres@localhost:54329/postgres
      - name: Upload RLS exec log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: rls-exec-log
          path: coverage/rls-exec-log.jsonl

  # =====================================================
  # E2E TESTS
  # =====================================================

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_saas_barbearia
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.test.example .env.test
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_saas_barbearia" >> .env.test
          echo "NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321" >> .env.test
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=test-anon-key" >> .env.test

      - name: Run database migrations
        run: npm run db:test:reset
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_saas_barbearia

      - name: Verify no pending migrations (shadow check)
        run: npm run db:migrate:check
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_saas_barbearia

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # =====================================================
  # SECURITY SCANNING
  # =====================================================

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # =====================================================
  # PERFORMANCE TESTING
  # =====================================================

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &

      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # =====================================================
  # BUILD AND DEPLOY (PRODUCTION)
  # =====================================================

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, e2e-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check migration divergence (production safety)
        run: npm run db:migrate:check
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: RLS expected strict check (production gate)
        run: npm run rls:expected:check

      - name: RLS expected summary (production)
        run: npm run rls:expected:summary | tee rls-expected-summary.prod.txt

      - name: Upload RLS summary (prod)
        uses: actions/upload-artifact@v3
        with:
          name: rls-expected-summary-prod
          path: rls-expected-summary.prod.txt

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to production
        uses: ./.github/actions/deploy
        with:
          environment: production
          image_tag: ${{ steps.meta.outputs.tags }}
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

  # =====================================================
  # STAGING DEPLOYMENT
  # =====================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (staging pre-check)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies (staging pre-check)
        run: npm ci

      - name: Check migration divergence (staging)
        run: npm run db:migrate:check
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: RLS expected strict check (staging gate)
        run: npm run rls:expected:check

      - name: RLS expected summary (staging)
        run: npm run rls:expected:summary | tee rls-expected-summary.staging.txt

      - name: Upload RLS summary (staging)
        uses: actions/upload-artifact@v3
        with:
          name: rls-expected-summary-staging
          path: rls-expected-summary.staging.txt

      - name: Deploy to staging
        uses: ./.github/actions/deploy
        with:
          environment: staging
        env:
          DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.STAGING_SUPABASE_PROJECT_REF }}

  # =====================================================
  # BACKUP VERIFICATION
  # =====================================================

  verify-backups:
    name: Verify Backup System
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Test backup script
        run: |
          chmod +x scripts/backup/daily-logical-backup.sh
          # Run backup verification (dry run)
          BACKUP_S3_BUCKET=test-bucket \
          SUPABASE_DB_URL=${{ secrets.TEST_DB_URL }} \
          scripts/backup/daily-logical-backup.sh --verify-only

      - name: Test disaster recovery script
        run: |
          chmod +x scripts/recovery/disaster-recovery.sh
          # Test recovery script (dry run)
          BACKUP_S3_BUCKET=test-bucket \
          SUPABASE_DB_URL=${{ secrets.TEST_DB_URL }} \
          scripts/recovery/disaster-recovery.sh --help

  # =====================================================
  # MONITORING AND NOTIFICATIONS
  # =====================================================

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()

    steps:
      - name: Notify Slack on success
        if: needs.build-and-deploy.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: '✅ Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.build-and-deploy.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          message: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
